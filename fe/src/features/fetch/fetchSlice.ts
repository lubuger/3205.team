import {
    createAsyncThunk, createSlice
} from "@reduxjs/toolkit"
import { RootState } from "../../app/store";


export interface FetchState {
    status: "idle" | "loading" | "failed",
    users: User[],
}
export interface Data {
    email: string,
    number: number | undefined,
    signal?: AbortSignal,
}

export interface User {
    email: string,
    number: number,
}

const initialState : FetchState = {
    status: 'idle',
    users: [],
};

export const fetchAsync = createAsyncThunk(
    "fetch/fetch",
    async (data: Data) => {
        const response = await fetch('http://localhost:3000/users/find', {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
            body: JSON.stringify({
                email: data.email,
                number: data.number
            }),
            signal: data.signal
        })

        return response.json();
    },
)

export const fetchSlice = createSlice({
    name: "fetch",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setLoading: (state) => {
            state.status = 'loading';
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchAsync.pending, (state) => {
                state.status = "loading";
                state.users = [];
            })
            .addCase(fetchAsync.fulfilled, (state, action) => {
                state.status = "idle";
                state.users = action.payload;
            })
            .addCase(fetchAsync.rejected, (state) => {
                state.status = "failed";
            })
    },
});

export const { setLoading } = fetchSlice.actions;

export const selectStatus = (state: RootState) => state.fetch.status;
export const selectUsers = (state: RootState) => state.fetch.users;

export default fetchSlice.reducer;